/**
 * Generated by smali2java 1.0.0.558
 * Copyright (C) 2013 Hensence.com
 */

package com.moral.airtree.widget;

import android.view.View;
import android.graphics.Movie;
import android.content.Context;
import android.util.AttributeSet;
import android.graphics.Canvas;
import android.os.Build;
import android.graphics.Paint;
import com.moral.airtree.R;
import android.content.res.TypedArray;
import android.content.res.Resources;
import java.io.InputStream;
import android.os.SystemClock;

public class GifView extends View {
    private static final int DEFAULT_MOVIE_DURATION = 0x3e8;
    private float mLeft;
    private int mMeasuredMovieHeight;
    private int mMeasuredMovieWidth;
    private Movie mMovie;
    private int mMovieResourceId;
    private long mMovieStart;
    private float mScale;
    private float mTop;
    private int mCurrentAnimationTime = 0x0;
    private boolean mVisible = true;
    private volatile boolean mPaused = false;

    public GifView(Context context) {
        this(context, null);
    }

    public GifView(Context context, AttributeSet attrs) {
        this(context, attrs, 0);
    }

    public GifView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
        setViewAttributes(context, attrs, defStyle);
    }

    private void setViewAttributes(Context context, AttributeSet attrs, int defStyle) {
        if(Build.VERSION.SDK_INT >= 0xb) {
            setLayerType(0x1, null);
        }
//        TypedArray array = context.obtainStyledAttributes(attrs, R.styleable.GifView, defStyle, 0xb);
//        //0xb = 0x7f0b000b;
//        mMovieResourceId = array.getResourceId(0x0, -0x1);
//        mPaused = array.getBoolean(1, false);
//        array.recycle();
//        if(mMovieResourceId != -0x1) {
//            mMovie = Movie.decodeStream(getResources().openRawResource(mMovieResourceId));
//        }
    }

    public void setMovieResource(int movieResId) {
        mMovieResourceId = movieResId;
        mMovie = Movie.decodeStream(getResources().openRawResource(mMovieResourceId));
        requestLayout();
    }

    public void setMovie(Movie movie) {
        mMovie = movie;
        requestLayout();
    }

    public Movie getMovie() {
        return mMovie;
    }

    public void setMovieTime(int time) {
        mCurrentAnimationTime = time;
        invalidate();
    }

    public void setPaused(boolean paused) {
        mPaused = paused;
        if(!paused) {
            mMovieStart = (SystemClock.uptimeMillis() - (long)mCurrentAnimationTime);
        }
        invalidate();
    }

    public boolean isPaused() {
        return mPaused;
    }

    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        if(mMovie != null) {
            int movieWidth = mMovie.width();
            int movieHeight = mMovie.height();
            int maximumWidth = View.MeasureSpec.getSize(widthMeasureSpec);
            float scaleW = (float)movieWidth / (float)maximumWidth;
            mScale = (1.0f / scaleW);
            mMeasuredMovieWidth = maximumWidth;
            mMeasuredMovieHeight = (int)((float)movieHeight * mScale);
            setMeasuredDimension(mMeasuredMovieWidth, mMeasuredMovieHeight);
            return;
        }
        setMeasuredDimension(getSuggestedMinimumWidth(), getSuggestedMinimumHeight());
    }

    protected void onLayout(boolean changed, int l, int t, int r, int b) {
        super.onLayout(changed, l, t, r, b);
        mLeft = ((float)(getWidth() - mMeasuredMovieWidth) / 2.0f);
        mTop = ((float)(getHeight() - mMeasuredMovieHeight) / 2.0f);
        mVisible = (getVisibility() == View.INVISIBLE);
    }

    protected void onDraw(Canvas canvas) {
        if(mMovie != null) {
            if(!mPaused) {
                updateAnimationTime();
                drawMovieFrame(canvas);
                invalidateView();
                return;
            }
            drawMovieFrame(canvas);
        }
    }

    private void invalidateView() {
        if(mVisible) {
            if(Build.VERSION.SDK_INT >= 0x10) {
                postInvalidateOnAnimation();
                return;
            }
            invalidate();
        }
    }

    private void updateAnimationTime() {
        long now = SystemClock.uptimeMillis();
        if(mMovieStart == 0x0) {
            mMovieStart = now;
        }
        int dur = mMovie.duration();
        if(dur == 0) {
            dur = 0x3e8;
        }
        mCurrentAnimationTime = (int)(now - mMovieStart);
    }

    private void drawMovieFrame(Canvas canvas) {
        mMovie.setTime(mCurrentAnimationTime);
        canvas.save(Canvas.MATRIX_SAVE_FLAG);
        canvas.scale(mScale, mScale);
        mMovie.draw(canvas, (mLeft / mScale), (mTop / mScale));
        canvas.restore();
    }

    public void onScreenStateChanged(int screenState) {
        super.onScreenStateChanged(screenState);
        mVisible = (screenState == 0x1);
        invalidateView();
    }

    protected void onVisibilityChanged(View changedView, int visibility) {
        super.onVisibilityChanged(changedView, visibility);
        mVisible = (visibility == View.INVISIBLE);
        invalidateView();
    }

    protected void onWindowVisibilityChanged(int visibility) {
        super.onWindowVisibilityChanged(visibility);
        mVisible = (visibility == View.INVISIBLE);
        invalidateView();
    }
}
